<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="yks.ticket.lite.dao.master.ProjectDao">
  <resultMap id="projectResultMap" type="yks.ticket.lite.entity.master.ProjectEntity" autoMapping="true">
  </resultMap>

  <select id="findMaxId">
    select max(id) max_id from m_project
  </select>

  <insert id="addProject">
    insert into m_project (
			  id            --識別子（自動付番）
			, name          --プロジェクト名称
			, description   --プロジェクトの説明
			, manager_id    --プロジェクト管理者ID
			, alive         --プロジェクト進行中
			, opened        --第三者に公開
	    , createUserId  --作成者ID
	    , updateUserId  --更新者ID
    ) values (
			  #{id}            --識別子（自動付番）
			, #{name}          --プロジェクト名称
			, #{description}   --プロジェクトの説明
			, #{manager_id}    --プロジェクト管理者ID
			, #{alive}         --プロジェクト進行中
			, #{opened}        --第三者に公開
	    , #{createUserId}  --作成者ID
	    , #{createUserId}  --更新者ID
    )
  </insert>

  <select id="findByProjectId">
    select
			  id            --識別子（自動付番）
			, name          --プロジェクト名称
			, description   --プロジェクトの説明
			, manager_id    --プロジェクト管理者ID
			, alive         --プロジェクト進行中
			, opened        --第三者に公開
	    , createUserId  --作成者ID
	    , updateUserId  --更新者ID
			, updatedate as last_update	--最終更新日時
      , versionNo as version    	--バージョンNo
    from m_project
    where id = #{id}
  </select>

  <update id="updateProject">
    update m_project set
			  id = #{id}                      --識別子
			, name = #{name}                  --プロジェクト名称
			, description = #{description}    --プロジェクトの説明
			, manager_id = #{manager_id}      --プロジェクト管理者ID
			, alive = #{alive}                --プロジェクト進行中
			, opened = #{opened}              --第三者に公開
      , updateDate = CURRENT_TIMESTAMP  --更新日時
      , updateUserId = #{updateUserId}  --更新者ID
      , versionNo = versionNo + 1       --バージョンNo
    where id = #{id}
  </update>

  <select id="projectList">
		select
		   SRC.id		--プロジェクトID
		 , SRC.name		--プロジェクト名称
		 , SRC.kid		--チケット種類ID
		 , SRC.kname	--チケット種類名称
		 , coalesce(CNT.clear_num, 0) finish_num	--処置完了件数
		 , coalesce(CNT.total, 0) total_num		--総件数
		from (
				-- プロジェクトのチケット種類一覧
				select
				    M1.id		--プロジェクトID
				  , M1.name		--プロジェクト名称
				  , T1.id kid	--チケット種類ID
				  , T1.name kname	--チケット種類名称
				  , T1.disp_seq		--チケット種類表示順
				from m_project M1	--プロジェクトマスタ
				inner join t_ticket_kind T1		--チケット種類
				   on T1.project_id = M1.id		--プロジェクトID
				  and T1.available  = 'yes'
			union all
				-- プロジェクトの一覧
				select
				    M2.id		--プロジェクトID
				  , M2.name		--プロジェクト名称
				  , 0 kid		--チケットの種類ID
				  , '' kname	--チケットの種類名称
				  , -1 disp_seq		--チケット種類表示順
				from m_project M2	--プロジェクトマスタ
		) SRC
		inner join (
				-- チケット種類ごとの件数
				select T1.project_id				--プロジェクトID
				  , T1.kind_id						--種類ID
				  , count(T1.finish_date) clear_num
				  , count(1) total			--プロジェクトのチケット総件数
				 from t_ticket T1
				group by T1.project_id, T1.kind_id
			union all
				-- プロジェクトごとの件数
				select MP.id						--プロジェクトID
				  , 0 kind_id
				  , PTC.clear_num
				  , PTC.total
				from m_project MP		--プロジェクトマスタ
				left outer join (
					select T1.project_id				--プロジェクトID
					  , 0 kind_id
					  , count(T1.finish_date) clear_num
					  , count(1) total			--プロジェクトのチケット総件数
					 from t_ticket T1	--チケットマスタ
					group by T1.project_id
					) PTC
					on PTC.project_id = MP.id
		) CNT
			  on CNT.project_id = SRC.id
			 and CNT.kind_id    = SRC.kid
		order by SRC.name		--プロジェクト名称
		       , SRC.disp_seq	--チケット種類表示順
	</select>
</mapper>